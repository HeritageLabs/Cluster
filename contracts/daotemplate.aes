include "List.aes"
include "String.aes"

contract DAO = 

    record state = {
        voteTime : int,
        quorum : int,
        members: list(address),
        _ismember: map(address, bool),
        proposals: list(proposal),
        totalProposals: int,
        totalMembers: int}

    record proposal = {
        id: int,
        title: string,
        description: string,
        proposalType: string,
        value: int,
        receipient: address,
        endTime: int,
        votes: int,
        isExecuted: bool}

    record details = {
        balance: int,
        members: list(address),
        quorum: int,
        voteTime: int}

    stateful entrypoint init(_voteTime: int, _quorum: int, _members: list(address)) =
        {voteTime = _voteTime,
            quorum = _quorum,
            members = _members,
            _ismember = {},
            proposals = [],
            totalProposals = 0,
            totalMembers = 0}

    public entrypoint getProposal(_id: int): proposal = List.get(_id, state.proposals)

    public entrypoint getProposals(): list(proposal) = state.proposals

    public entrypoint getOngoingProposals(): list(proposal) =
        List.filter((p) => p.endTime < Chain.timestamp, state.proposals)

    public entrypoint getProposalsToExecute(): list(proposal) = 
        List.filter((p) => p.endTime > Chain.timestamp && p.isExecuted == true, state.proposals)

    public entrypoint getDetails(): details = {balance = Contract.balance, members = state.members, quorum = state.quorum, voteTime = state.voteTime}


    public stateful entrypoint vote(_proposalId: int) = 
        require(_proposalId < state.totalProposals, "Invalid proposal id")
        let p : proposal = List.get(_proposalId, state.proposals)
        require(p.endTime > Chain.timestamp, "This proposal has ended")
        p{votes = p.votes + 1}
        put(state{proposals =
            List.replace_at(_proposalId, p, state.proposals)})

    /** createProposal -  function to create a new proposal
            args - 
                _title: Proposal title
                _description: Proposal description
                _type: type of proposal, must be one of 
                        transfer(to transfer fund), 
                        quorum(to change state.quorum to a new value), 
                        voteTime(to change the state.voteTime to a new value),
                        add(to add a new member to the DAO) or
                        remove(to remove an existing member from the DAO)
                _amount: amount of token to transfer(should be 0 if proposal is not of type transfer)
                _receipient: address to transfer the tokens to
     */
    public stateful entrypoint createProposal(_title: string, _description: string, _type: string, _value: int, _receipient: address) =
        require(Contract.balance >= _value, "insufficient fund")
        let _proposalId : int = state.totalProposals
        let _newProposal : proposal = {id = _proposalId,
            title = _title,
            description = _description,
            proposalType = _type,
            value = _value,
            receipient = _receipient,
            endTime = Chain.timestamp + (state.voteTime * 3600),
            votes = 0,
            isExecuted = false}
        put(state{proposals @ p = p ++ [_newProposal]})
        put(state{totalProposals @ tp = tp + 1})
        _proposalId

    public stateful entrypoint executeProposal(_proposalId: int) = 
        require(_proposalId < state.totalProposals, "Invalid proposal id")
        let p = List.get(_proposalId, state.proposals)
        require(p.isExecuted == false, "This proposal is already executed!")
        //Confirm quorum has been reached
        require((p.votes / state.totalMembers) * 100 >= state.quorum, "quorum has not been reached")
        if (p.proposalType == "transfer")
            Chain.spend(p.receipient, p.value)

        elif (p.proposalType == "quorum")
            _setQuorum(p.value)

        elif (p.proposalType == "voteTime")
            _setVoteTime(p.value)

        elif (p.proposalType == "add")
            _addMember(p.receipient)

        elif (p.proposalType == "remove")
            _removeMember(p.receipient)

        else
            abort("Invalid proposal type")
        
        p{isExecuted = true}
        put(state{proposals = 
            List.replace_at(_proposalId, p, state.proposals)})


    stateful entrypoint _setQuorum(_quorum: int) = 
        put(state{quorum = _quorum})

    stateful entrypoint _setVoteTime(_voteTime: int) = 
        put(state{voteTime = _voteTime})

    stateful entrypoint _addMember(_member: address) = 
        put(state{members @ m = m ++ [_member]})
        put(state{totalMembers @ t = t + 1})

    stateful entrypoint _removeMember(_member: address) = 
        put(state{members =
            List.filter((m) => m == _member, state.members)})
        put(state{totalMembers @ t = t - 1})

    public stateful payable entrypoint donate() = 
        Contract.balance
